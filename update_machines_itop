#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
iTop Machine Import Script

This script reads a CSV file containing machine data and updates existing machines in iTop.
It searches for machines by name and updates their information if they are found.
If a machine is not found, it skips to the next one.

CSV file structure:
machineType,name,fqdn,hostname,ip,description,os,os_version,cpu,memory,disk,owner,csamID
"""

import csv
import sys
import requests
import json
import logging
import argparse
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f"itop_import_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- iTop API Functions ---

def call_itop_api(url, username, password, operation, class_name, key=None, fields=None, version='1.3'):
    """
    Helper function to make calls to the iTop REST API.
    """
    payload = {
        'version': version,
        'json_data': json.dumps({
            'operation': operation,
            'class': class_name,
            **({'key': key} if key else {}),
            **(({'fields': fields, 'comment': 'Updated via CSV import script'} if fields else {}))
        })
    }
    
    # Authentication parameters
    auth_params = {
        'auth_user': username,
        'auth_pwd': password
    }
    payload.update(auth_params)
    
    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"API call failed: {e}")
        return None
    except json.JSONDecodeError:
        logger.error("Failed to decode JSON response from iTop")
        return None

def search_machine_by_name(url, username, password, machine_type, name):
    """
    Search for a machine in iTop by name
    
    Args:
        url (str): iTop API URL
        username (str): iTop username
        password (str): iTop password
        machine_type (str): Type of machine ('Server' or 'VirtualMachine')
        name (str): Machine name
    
    Returns:
        dict: Machine data if found, None otherwise
    """
    logger.info(f"Searching for {machine_type}: {name}")
    
    # Create an OQL query to search by name
    oql_query = f"SELECT {machine_type} WHERE name = '{name}'"
    
    result = call_itop_api(
        url=url,
        username=username,
        password=password,
        operation='core/get',
        class_name=machine_type,
        key=oql_query
    )
    
    if result and 'objects' in result and result['objects']:
        # Get the first matching object
        first_object_id = list(result['objects'].keys())[0]
        logger.info(f"Found {machine_type} with ID: {first_object_id}")
        return result['objects'][first_object_id]
    else:
        logger.info(f"No {machine_type} found with name '{name}'")
        return None

def update_machine(url, username, password, machine_type, machine_id, fields):
    """
    Update a machine in iTop
    
    Args:
        url (str): iTop API URL
        username (str): iTop username
        password (str): iTop password
        machine_type (str): Type of machine ('Server' or 'VirtualMachine')
        machine_id (int): ID of the machine to update
        fields (dict): Fields to update
            
    Returns:
        bool: True if successful, False otherwise
    """
    logger.info(f"Updating {machine_type} (ID: {machine_id}) with fields: {fields}")
    
    result = call_itop_api(
        url=url,
        username=username,
        password=password,
        operation='core/update',
        class_name=machine_type,
        key=machine_id,
        fields=fields
    )
    
    if result and 'code' in result and result['code'] == 0:
        logger.info(f"Successfully updated {machine_type} (ID: {machine_id})")
        return True
    else:
        error_msg = result.get('message', 'Unknown error') if result else 'API call failed'
        logger.error(f"Error updating {machine_type} (ID: {machine_id}): {error_msg}")
        return False


def process_csv(file_path, url, username, password):
    """
    Process the CSV file and update machines in iTop
    
    Args:
        file_path (str): Path to the CSV file
        url (str): iTop API URL
        username (str): iTop username
        password (str): iTop password
        
    Returns:
        tuple: (processed, updated, skipped) counts
    """
    processed = 0
    updated = 0
    skipped = 0
    
    try:
        with open(file_path, 'r', encoding='utf-8-sig') as f:
            reader = csv.DictReader(f)
            
            for row in reader:
                processed += 1
                machine_type = row.get('machineType', '').strip()
                name = row.get('name', '').strip()
                
                if not machine_type or not name:
                    logger.warning(f"Skipping row {processed}: Missing machine type or name")
                    skipped += 1
                    continue
                
                # Validate machine type
                if machine_type not in ['Server', 'VirtualMachine']:
                    logger.warning(f"Skipping row {processed}: Invalid machine type '{machine_type}'")
                    skipped += 1
                    continue
                
                logger.info(f"Processing {machine_type}: {name}")
                
                # Search for the machine in iTop
                machine = search_machine_by_name(url, username, password, machine_type, name)
                
                if not machine:
                    logger.info(f"Machine not found, skipping: {name}")
                    skipped += 1
                    continue
                
                # Prepare fields to update
                fields = {}
                
                # Base field mapping - common for all machine types
                field_mapping = {
                    'fqdn': 'fqdn',
                    'hostname': 'hostname',
                    'ip': 'ip_address',  # Assuming the field name in iTop is 'ip_address'
                    'os': 'os_family',   # Assuming the field name in iTop
                    'os_version': 'os_version',
                    'cpu': 'cpu',
                    'memory': 'ram',     # Assuming the field name in iTop is 'ram'
                    'owner': 'owner_name', # Assuming the field name in iTop
                    'csamID': 'csam_id'   # Assuming the field name in iTop
                }
                
                # Handle type-specific field mappings
                if machine_type == 'VirtualMachine':
                    # For VirtualMachine, map description to notes and include disk field
                    if 'description' in row and row['description'].strip():
                        fields['notes'] = row['description'].strip()
                    
                    # Only process disk field for VirtualMachine
                    if 'disk' in row and row['disk'].strip():
                        fields['disk_space'] = row['disk'].strip()
                else:  # Server type
                    # For Server, map description to description
                    if 'description' in row and row['description'].strip():
                        fields['description'] = row['description'].strip()
                    
                    # Ignore disk field for Server type
                
                # Add other non-empty fields to the update
                for csv_field, itop_field in field_mapping.items():
                    if csv_field in row and row[csv_field].strip():
                        fields[itop_field] = row[csv_field].strip()
                
                # Update the machine in iTop
                if fields:
                    success = update_machine(url, username, password, machine_type, machine['key'], fields)
                    if success:
                        updated += 1
                    else:
                        skipped += 1
                else:
                    logger.warning(f"No fields to update for {name}")
                    skipped += 1
    
    except FileNotFoundError:
        logger.error(f"File not found: {file_path}")
    except Exception as e:
        logger.error(f"Error processing CSV: {e}")
    
    return processed, updated, skipped


def main():
    parser = argparse.ArgumentParser(description='Import machine data from CSV to iTop')
    parser.add_argument('file', help='Path to the CSV file')
    parser.add_argument('--url', required=True, help='iTop REST API URL (e.g., https://itop.example.com/webservices/rest.php)')
    parser.add_argument('--user', required=True, help='iTop username')
    parser.add_argument('--password', required=True, help='iTop password')
    
    args = parser.parse_args()
    
    logger.info("Starting iTop machine import")
    
    # Process the CSV file
    processed, updated, skipped = process_csv(args.file, args.url, args.user, args.password)
    
    logger.info(f"Import complete. Processed: {processed}, Updated: {updated}, Skipped: {skipped}")


if __name__ == "__main__":
    main()
